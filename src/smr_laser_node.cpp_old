#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <sensor_msgs/LaserScan.h>
#include "pugixml.hpp"

#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/fcntl.h>

class SMRLaserNode
{

  //Ros objects
  ros::NodeHandle nh_;

  // Transform
  //tf::TransformListener tf_listener_;

  ros::Publisher scan_publisher_;

  // Subscriptions
  // ros::Subscriber occupancy_subscriber_;
  // ros::Subscriber odom_subscriber_;

  int mysocket;

  sensor_msgs::LaserScan laser_data;

  const static float PI = 3.14159265;

public:
  SMRLaserNode(ros::NodeHandle& nh) :
    nh_(nh),
    scan_publisher_(nh_.advertise<sensor_msgs::LaserScan> ("/base_scan", 1))
  {
    ROS_INFO("Started SMR Laser Node");

    mysocket = socket(AF_INET, SOCK_STREAM, 0);
    ROS_INFO("Socket %i", mysocket); // todo: check-1

    struct sockaddr_in m_addr;

    m_addr.sin_family = AF_INET;
    inet_aton("192.38.66.86", &m_addr.sin_addr);
    m_addr.sin_port = htons ( 24919 );

    int c = connect(mysocket, (struct sockaddr*)&m_addr, sizeof(m_addr));
    ROS_INFO("Connect %i", c); // todo: check -1

    fcntl(mysocket, F_SETFL, O_NONBLOCK);  // set to non-blocking

    laser_data.header.frame_id="laser_frame";
    laser_data.angle_min = -120.0 / 180.0 * PI;
    laser_data.angle_max =  120.0 / 180.0 * PI;
    laser_data.angle_increment = (240.0 / 180.0 * PI) / 682;
    laser_data.scan_time = 0.1;
    laser_data.time_increment = 0.0;
    laser_data.range_min = 0.0;
    laser_data.range_max = 5.0;
  }

  int intValue(char character)
  {
    if( character <= '9' )
    {
      return( (unsigned int)character - (unsigned int)'0');
    }
    else
    {
      return( (unsigned int)character - (unsigned int)'a' + 10);
    }
  }

  void read()
  {
    char buf[5000];
    int count = recv(mysocket, buf, 5000, 0);
    ROS_INFO("Read %i", count); // todo: check -1

    if( count <= 0 )
    {
      return;
    }

    pugi::xml_document doc;
    //pugi::xml_parse_result result = doc.load_file("docs/scan.xml");
    pugi::xml_parse_result result = doc.load_buffer(buf, count );
    if( result.status == pugi::status_ok )
    {
      const char* data = doc.first_child().child("bin").child_value();
      if( data != 0 && data[0] != 0 )
      {
        laser_data.ranges.clear();
        char* value = "0000";
        for( int i = 0; i < 682; i++ )
        {
          int dec = intValue( data[1] )           +
                    intValue( data[0] ) * 16      +
                    intValue( data[3] ) * 16 * 16 +
                    intValue( data[2] ) * 16 * 16 * 16;
          float distance = dec * 0.001;
          laser_data.ranges.push_back(distance);
          data += 4;
        }
        scan_publisher_.publish(laser_data);
        ROS_INFO("Published");
      }
      else
      {
        ROS_INFO("No Data");
      }
    }
    else
    {
      ROS_INFO("XML error"); // todo: check -1
    }

  }

  void send()
  {
    const char * msg = "scanGet\n";
    ::send( mysocket, msg, 8, 0 );
  }

  void run(int argc, char** argv)
  {
    // Initialize ROS

    ros::Rate r(10);
    while (nh_.ok())
    {
      ros::spinOnce();
      send();
      read();
      r.sleep();
    }
  }

};

int main(int argc, char** argv)
{
  ros::init(argc, argv, "smr_laser_node");
  ros::NodeHandle nh;
  SMRLaserNode component(nh);

  component.run(argc, argv);
  return 0;
}

